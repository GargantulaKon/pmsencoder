#!/usr/bin/env perl

use strict;
use warnings;

use Cwd qw(abs_path getcwd);
use File::Which qw(which);
use FindBin qw($Bin);
use IO::All;
use List::MoreUtils qw(first_index);
use LWP::Simple qw(get head);
use POSIX qw(strftime);
use YAML qw(LoadFile);

my $CACHE_SIZE        = 16384; # streaming cache size in Kb
my $CWD               = getcwd();
my $DEFAULT_FPS       = 25; # default framerate
my $LOGFILE_PATH      = 'ps3mencoder.log'; # save alongside debug.log
my $LOGFILE           = io($LOGFILE_PATH); # debug log
my $VERSION           = '0.10';
my $WINDOWS           = $^O eq 'MSWin32'; # is this running on Windows?
my $YOUTUBE           = qr{http://(?:\w+\.)?youtube\.com/watch\?v=([^&]+)}; # YouTube page
my @YOUTUBE_FORMATS   = qw(22 18 5); # YouTube formats (see below)

=for comment

    mencoder http://movies.apple.com/movies/foo.mov -prefer-ipv4 \
        -nocache -quiet -oac lavc -of lavf -lavfopts format=dvd -ovc lavc \
        -lavcopts vcodec=mpeg2video:vbitrate=4096:threads=2:acodec=ac3:abitrate=128 \
        -ofps 24000/1001 -o /tmp/javaps3media/mencoder1261801759641

=cut

###################################################################################

sub debug($) {
    my $message = shift;
    my $now = strftime("%Y-%m-%d %H:%M:%S", localtime);

    $LOGFILE->append("$now: $VERSION: $$: $message", $/);
}

sub fatal($) {
    my $message = shift;

    debug("ERROR: $message");

    die "$0: $VERSION: $$: ERROR: $message", $/;
}

sub set($;$) {
    my ($name, $value) = @_;
    my $index = first_index { $_ eq $name } @ARGV;

    if ($index == -1) {
        if (defined $value) {
            debug "adding $name $value";
            push @ARGV, $name, $value;
        } else {
            debug "adding $name";
            push @ARGV, $name;
        }
    } elsif (defined $value) {
        if (ref($value) eq 'CODE') {
            local $_ = $ARGV[ $index + 1 ];
            my $old = $_;
            $value->();
            $ARGV[ $index + 1 ] = $_;
            debug "replaced $old with $_ in $name";
        } else {
            debug "setting $name to $value";
            $ARGV[ $index + 1 ] = $value;
        }
    }
}

sub subst($$$) {
    my ($name, $search, $replace) = @_;
    my $index = first_index { $_ eq $name } @ARGV;

    if ($index != -1) {
        debug "replacing $search with $replace in " . $ARGV[ $index + 1 ];
        $ARGV[ $index + 1 ] =~ s{$search}{$replace};
    }
}

sub add($;@) {
    my ($name, $value) = @_;

    if (defined $value) {
        debug "adding $name $value";
        push @ARGV, $name, $value;
    } else {
        debug "adding $name";
        push @ARGV, $name;
    }
}

sub value($) {
    my $name = shift;
    my $index = first_index { $_ eq $name } @ARGV;

    if ($index == -1) {
        return undef;
    } else {
        return $ARGV[ $index + 1 ];
    }
}

sub isdef($) {
    my $name = shift;
    my $index = first_index { $_ eq $name } @ARGV;

    return ($index != -1);
}

sub remove($) {
    my $name = shift;
    my $index = first_index { $_ eq $name } @ARGV;

    unless ($index == -1) {
        debug "removing $name";
        splice @ARGV, $index, 1;
    }
}

sub replace($@) {
    my ($old, @new) = @_;
    my $index = first_index { $_ eq $old } @ARGV;

    unless ($index == -1) {
        debug "replacing $old with @new";
        splice @ARGV, $index, 1, @new;
    }
}

sub fps($) {
    set('-ofps', shift);
}

sub user_agent($) {
    set('-user-agent', shift);
}

sub mencoder() {
    my $mencoder;

    if ($WINDOWS) {
        my $mencoder_dir = abs_path($Bin);
        chdir $mencoder_dir or fatal "can't chdir to $Bin";
        $mencoder = 'mencoder.exe';
        fatal "can't find $mencoder in $mencoder_dir" unless (-s $mencoder);
    } else {
        $mencoder = which('mencoder') || fatal("can't find mencoder");
    }

    my $rc;

    debug "exec: $mencoder @ARGV";

    {
        local $SIG{CHLD} = 'IGNORE'; # XXX try to ensure mencoder is reaped
        $rc = system($mencoder, @ARGV);
    }

    if (($rc == 0) || (($rc == -1) && defined($!) && ($! eq 'No child processes'))) {
        exit 0;
    } else {
        fatal "can't exec $mencoder @ARGV: $! ($?)";
    }
}

###################################################################################

$| = 1; # unbuffer output

mencoder() unless (isdef('-prefer-ipv4') && isdef('-ovc'));

my $URI = $ARGV[0];
my $CONFIG;

$LOGFILE->append($/) if (-s $LOGFILE_PATH);

debug "$0 @ARGV";
remove('-nocache'); # this should *never* be set
remove('-quiet'); # XXX: for debugging only
set('-cache', $CACHE_SIZE); # use a healthy cache for streaming - the default is only 8 Mb
fps($DEFAULT_FPS);

if (-s 'ps3mencoder.yml') {
    $CONFIG = eval { LoadFile('ps3mencoder.yml') };
} elsif (-s 'ps3mencoder.conf') {
    $CONFIG = eval { LoadFile('ps3mencoder.conf') };
} else {
    debug "can't find ps3mencoder.conf or ps3mencoder.yml in $CWD";
}

fatal "can't load YAML: $@" if ($@);

=for comment
{
  'Apple Trailers (HD)' => {
    'match' => '^http://(?:(?:movies|www)\\.)?apple\\.com/.+\\.m4v$',
    'options' => {
      'fps' => '24',
      'lavcopts' => {
        '4096' => '5086'
      },
      'user-agent' => 'Quicktime/7.6.4'
    }
  },
  'Apple Trailers (SD)' => {
    'match' => '^http://(?:(?:movies|www)\\.)?apple\\.com/.+\\.mov$',
    'options' => {
      'fps' => '24',
      'user-agent' => 'Quicktime/7.6.4'
    }
  }
}
=cut

if ($CONFIG) {
    while (my ($match_name, $match_value) = each (%$CONFIG)) {
        if ($URI =~ $match_value->{match}) {
            my $re = $match_value->{match};

            debug "matched $match_name: $re";

            while (my ($option_name, $option_value) = each (%{$match_value->{options}})) {
                $option_name =~ s{^([-+]?)}{-};

                if (ref $option_value) {
                    while (my ($search, $replace) = each (%$option_value)) {
                        subst($option_name, $search, $replace);
                    }
                } else {
                    my $op;
                   
                    if ($1 eq '-') {
                        $op = \&remove;
                    } elsif ($1 eq '+') {
                        $op = \&add;
                    } else {
                        $op = \&set;
                    }

                    $op->($option_name, $option_value);
                }
            }
        }
    }
}

if ($URI =~ $YOUTUBE) {
    # extract the media URI - see http://stackoverflow.com/questions/1883737/getting-an-flv-from-youtube-in-net
    my $id = $1;
    my $html = get($URI) || fatal "couldn't retrieve $URI";
    my ($signature) = $html =~ m{"t":\s*"([^"]+)"};
    my $found = 0;

    # via http://www.longtailvideo.com/support/forum/General-Chat/16851/Youtube-blocked-http-youtube-com-get-video
    #
    # No &fmt = FLV (very low)
    # &fmt=5  = FLV (very low)
    # &fmt=6  = FLV (works not always)
    # &fmt=13 = 3GP (mobile phone)
    # &fmt=18 = MP4 (normal)
    # &fmt=22 = MP4 (hd)

    for my $fmt (@YOUTUBE_FORMATS) {
        my $uri = "http://www.youtube.com/get_video?fmt=$fmt&video_id=$id&t=$signature";
        next unless (head $uri);
        $ARGV[0] = $uri;
        $found = 1;
        last;
    }

    fatal "can't retrieve media for $URI" unless ($found);
}

mencoder();

#!/usr/bin/env perl

use strict;
use warnings;

use Config;
use Cwd qw(abs_path);
use File::Spec;
use File::Which qw(which);
use FindBin qw($Bin);
use IO::All;
use LWP::Simple qw(get head);
use List::MoreUtils qw(first_index);

my $APPLE_TRAILERS    = qr{^http://(?:(?:movies|www)\.)?apple\.com/}; # Apple trailers URI
my $APPLE_USER_AGENT  = 'Quicktime/7.6.4'; # user agent for Apple trailers
my $CACHE_SIZE        = 16384; # streaming cache size in Kb
my $DEFAULT_FPS       = 25; # default framerate
my $LOGFILE           = io(File::Spec->catdir(File::Spec->tmpdir, 'ps3mencoder.log')); # debug log
my $WINDOWS           = $Config{osname} eq 'MSWin32'; # is this running on Windows?
my $YOUTUBE           = qr{http://(?:\w+\.)?youtube\.com/watch\?v=([^&]+)}; # YouTube page
my @YOUTUBE_FORMATS   = qw(22 18 5); # YouTube formats (see below)

=for comment

    mencoder http://movies.apple.com/movies/foo.mov -prefer-ipv4 \
        -nocache -quiet -oac lavc -of lavf -lavfopts format=dvd -ovc lavc \
        -lavcopts vcodec=mpeg2video:vbitrate=4096:threads=2:acodec=ac3:abitrate=128 \
        -ofps 24000/1001 -o /tmp/javaps3media/mencoder1261801759641

=cut

###################################################################################

sub set($;$) {
    my ($name, $value) = @_;
    my $index = first_index { $_ eq $name } @ARGV;

    if ($index == -1) {
        if (defined $value) {
            push @ARGV, $name, $value;
        } else {
            push @ARGV, $name;
        }
    } elsif (defined $value) {
        if (ref($value) eq 'CODE') {
            local $_ = $ARGV[ $index + 1 ];
            $value->();
            $ARGV[ $index + 1 ] = $_;
        } else {
            $ARGV[ $index + 1 ] = $value;
        }
    }
}

sub value($) {
    my $name = shift;
    my $index = first_index { $_ eq $name } @ARGV;

    if ($index == -1) {
        return undef;
    } else {
        return $ARGV[ $index + 1 ];
    }
}

sub isdef($) {
    my $name = shift;
    my $index = first_index { $_ eq $name } @ARGV;

    return ($index != -1);
}

sub remove($) {
    my $name = shift;
    my $index = first_index { $_ eq $name } @ARGV;

    unless ($index == -1) {
        splice @ARGV, $index, 1;
    }
}

sub replace($@) {
    my ($old, @new) = @_;
    my $index = first_index { $_ eq $old } @ARGV;

    unless ($index == -1) {
        splice @ARGV, $index, 1, @new;
    }
}

sub fps($) {
    set('-ofps', shift);
}

sub user_agent($) {
    set('-user-agent', shift);
}

sub my_die($) {
    my $message = shift;
    my $now = localtime();

    $LOGFILE->append("$now: ERROR: $message", $/);

    die "$0: ERROR: $message", $/;
}

sub my_warn($) {
    my $message = shift;
    my $now = localtime();

    $LOGFILE->append("$now: $message", $/);

    warn "$0: $message", $/;
}

sub mencoder() {
    my $mencoder;

    if ($WINDOWS) {
        chdir abs_path($Bin) or die "can't chdir to $Bin";
        $mencoder = 'mencoder.exe';
    } else {
        $mencoder = which('mencoder') || my_die("can't find mencoder");
    }

    $SIG{CHLD} = 'IGNORE'; # XXX try to ensure mencoder is reaped
    my_warn "exec: $mencoder @ARGV";
    my_die "can't exec $mencoder @ARGV: $!" unless (system($mencoder, @ARGV) == 0);
    
    exit $?;
}

###################################################################################

$| = 1; # unbuffer output

mencoder() unless (isdef('-prefer-ipv4') && isdef('-ovc'));

remove('-nocache'); # this should *never* be set
remove('-quiet'); # XXX: for debugging only
set('-cache', $CACHE_SIZE); # use a healthy cache for streaming - the default is only 8 Mb

fps($DEFAULT_FPS);

my $URI = $ARGV[0];

if ($URI =~ $APPLE_TRAILERS) {
    if ($URI =~ m{/[^/]+\.m4v$}) { # http://movies.apple.com/movies/sony/2012/2012-tlr2_a720p.m4v
        # increase the bitrate
        set('-lavcopts', sub { s{4096}{5086} });
    } else { # http://movies.apple.com/movies/sony/2012/2012-tlr2_h640w.mov
        # XXX 4096 is a needlessly high video bitrate; they typically weigh in at ~1200 Kbps
    }

    fps(24);
    user_agent $APPLE_USER_AGENT; # fix the user agent
} elsif ($URI =~ $YOUTUBE) {
    # extract the media URI - see http://stackoverflow.com/questions/1883737/getting-an-flv-from-youtube-in-net
    my $id = $1;
    my $html = get($URI) || my_die "couldn't retrieve $URI";
    my ($signature) = $html =~ m{"t":\s*"([^"]+)"};
    my $found = 0;

    # via http://www.longtailvideo.com/support/forum/General-Chat/16851/Youtube-blocked-http-youtube-com-get-video
    #
    # No &fmt = FLV (very low)
    # &fmt=5  = FLV (very low)
    # &fmt=6  = FLV (works not always)
    # &fmt=13 = 3GP (mobile phone)
    # &fmt=18 = MP4 (normal)
    # &fmt=22 = MP4 (hd)

    for my $fmt (@YOUTUBE_FORMATS) {
        my $uri = "http://www.youtube.com/get_video?fmt=$fmt&video_id=$id&t=$signature";
        next unless (head $uri);
        $ARGV[0] = $uri;
        $found = 1;
        last;
    }

    my_die "can't retrieve media for $URI" unless ($found);
}

mencoder();

/*
    this file uses a syntax very similar to this:

	http://www.wakaleo.com/blog/237-more-groovy-magic-with-maven-pom-files

    i.e. a kind of Groovy JSON.
*/

config {
    /*
	this is the version of PMSEncoder in which this config file *syntax* was introduced i.e.
	the oldest version of PMSEncoder that will work with this file
	XXX Don't change this!
    */

    version 0.70

    profile ('Global') {
        match {
	    uri '^+\\w:\\/\\/.+' // match everything
	} options {
            /*
               PMS uses this option as the equivalent of a "no op" placeholder for local file transcodes.
               it can end up swamping the arguments and making the actual arguments
               less easy to read in the pmsencoder.log. Squash it down to a single -quiet by
               removing then restoring it.
               XXX: make sure these are ordered!
             */
            remove 'quiet'
            set 'quiet' // or set [ quiet: null ]

            /*
                PS3 only, but should be harmless on other renderers as it only sets upper bounds
                see http://en.wikipedia.org/wiki/H.264#Levels

                uncomment this option if you have a recent mencoder (i.e. post May 2007)
                see: http://lists.mplayerhq.hu/pipermail/mplayer-dev-eng/2007-May/051417.html
            */

            /*
            replace 
                [ lavcopts: 
                    // $ matches the end of the string i.e. append
                    [ '$': ':level=41' ]
                ]
            */

           /*
               streaming cache size in Kb
               use a healthy cache for Web streaming - the default is only 8 Mb
           */
           set [ cache: '16384' ]

           // this should *never* be set for Web requests
           remove 'nocache'

           // prevent MEncoder being presented with fractional framerates it can't handle
           set [ ofps: '25' ]

           // needed for MPEG video to ensure the (possibly) modified framerate doesn't cause A/V sync issues
           set [ vf: 'harddup' ]
        }
    }

    profile ('YouTube') {
        // extract the resource's video_id from the URI of the standard YouTube page
        match {
	    uri 'http://(?:\\w+\\.)?youtube\\.com/watch\\?v=(?<video_id>[^&]+)'
	}

        options {
              // extract the resource's sekrit identifier ($t) from the HTML
              get '"t":\\s*"(?<t>[^"]+)"'

              /*
                  now, with $video_id and $t defined, call the custom YouTube
                  handler with an array of formats in descending order of preference
              */
              youtube [ '22', '18', '6', '5' ]
        }
    }
                  
    profile ('Apple Trailers') {
        match {
	    uri '^http://(?:(?:movies|www)\\.)?apple\\.com/.+$'
	}

        // FIXME: 4096 is a needlessly high video bitrate; they typically weigh in at ~1200 Kbps
        options {
            set [
                ofps: '24',
                user-agent: 'QuickTime/7.6.2'
            ]
        }
    }

    profile ('Apple Trailers HD') {
        match {
	    uri '^http://(?:(?:movies|www)\\.)?apple\\.com/.+\\.m4v$'
	} options {
            replace [ lavcopts: [ '4096': '5086' ] ] // increase the bitrate
        }
    }

    profile ('TED') {
        match {
	    uri '^http://feedproxy\\.google\\.com/~r/TEDTalks_video\\b'
	} options {
            set [ ofps: '24' ]
        }
    }

    profile ('GameTrailers.com (Revert PMS Workaround)') {
        /*
           convert:
           http://www.gametrailers.com/download/48298/t_ufc09u_educate_int_gt.flv
           to:
           http://www.gametrailers.com/player/48298.html
         */

        // 1) extract the page ID
        match {
	    uri '^http://(www\\.)?gametrailers\\.com/download/(?<page_id>\\d+)/[^.]+\\.flv$'
	}
	
	// 2) and use it to restore the URI of the HTML
	options {
            let [
                [ uri: 'http://www.gametrailers.com/player/$page_id.html' ]
            ]
        }
    }

    profile ('GameTrailers.com') {
        match {
	    uri '^http://(www\\.)?gametrailers\\.com/'
	}
	
	options {
	    // The order is important here! Make sure we get the variables before we set the URI
            // extract some values from the HTML
            get [
                [ movie_id: '\\bmov_game_id\\s*=\\s*(\\d+)' ],
                [ filename: 'http://www.gametrailers.com/download/\\d+/(t_[^.]+)\\.wmv' ]
            ]

            // now use them to rewrite the URI
            let [
                [ uri: 'http://trailers-ak.gametrailers.com/gt_vault/$movie_id/$filename.flv' ]
            ]
        }
    }
}

# XXX: don't edit this file unless you're familiar with YAML: indentation is important!
# XXX: don't use JSON syntax! the YAML parser currently used to process this (YAML::Tiny) doesn't grok it

# XXX Don't change this!
version: 0.72

# XXX: only set this if pmsencoder can't find your system's mencoder i.e.
# if it dies with a "can't find mencoder" message. Supply the full path,
# including the extension (if any) e.g.
#
#    mencoder_path: /usr/bin/mencoder
#
# or (don't escape the backslashes on Windows):
#
#    mencoder_path: C:\Program Files\PS3 Media Server\win32\mencoder.exe
#
# XXX: if mencoder can't be found on Windows, something is wrong. Please report it on the forum.
# In the likely event that you don't use it, this setting can safely be left blank or commented out

# TODO allow this to be set per-profile
mencoder_path:

profiles:

  - name: PMS

    # match everything when pmsencoder is invoked by PMS
    match:
        context: PMS

    options:
        # PMS uses this option as the equivalent of a "no op" placeholder for local file transcodes.
        # it can end up swamping the arguments and making the actual arguments
        # less easy to read in the pmsencoder.log. Squash it down to a single -quiet by
        # removing then restoring it.
        # XXX: make sure these are ordered!
        - remove: quiet
        - set:    quiet

  - name: CLI

    # match everything when pmsencoder is invoked from the CLI
    match:
        context: CLI

    options:
        # turn -quiet off so we can see mencoder's progress
        remove: quiet

    #
    # replace:
    #     lavcopts:
    #         # see if nixing threads solves the orphan process issue
    #         \bthreads=\d+\b: threads=1

  - name: Web

    # match all URIs
    match:
        uri: '^\w+://.+$'

    options:
        # PS3 only, but should be harmless on other renderers as it only sets upper bounds
        # see http://en.wikipedia.org/wiki/H.264#Levels
        #
        # uncomment this option if you have a recent mencoder (i.e. post May 2007)
        # see: http://lists.mplayerhq.hu/pipermail/mplayer-dev-eng/2007-May/051417.html

        # - replace:
        #   lavcopts:
        #       # $ matches the end of the string i.e. append
        #       $: ':level=41'

      - set:
            # streaming cache size in Kb
            # use a healthy cache for Web streaming - the default is only 8 Mb
            cache: 16384

        # this should *never* be set for web requests
      - remove: nocache

        # prevent MEncoder being presented with fractional framerates it can't handle
      - set:
            ofps: 25

        # needed for MPEG video to ensure the (possibly) modified framerate doesn't cause A/V sync issues
      - set:
            vf: harddup

  - name: YouTube
    
    # extract the resource's video_id from the URI of the standard YouTube page
    match:
        uri: 'http://(?:\w+\.)?youtube\.com/watch\?v=(?<video_id>[^&]+)'

    options:
          # extract the resource's sekrit identifier ($t) from the HTML
          # - get: '"t":\s*"(?<t>[^"]+)"'
        - get: '&t=(?<t>[^&]+)'

          # now, with $video_id and $t defined, call the custom YouTube
          # handler with an array of formats in descending order of preference
        - youtube:
              - 22
              - 18
              - 6
              - 5
        
  - name: Apple Trailers
    match:
        uri: '^http://(?:(?:movies|www|trailers)\.)?apple\.com/.+$'

    # FIXME: 4096 is a needlessly high video bitrate; they typically weigh in at ~1200 Kbps
    options:
        set:
            ofps: 24
            user-agent: QuickTime/7.6.2

  - name: Apple Trailers HD
    match:
        uri: '^http://(?:(?:movies|www|trailers)\.)?apple\.com/.+\.m4v$'

    options:
        replace:
            lavcopts:
                # increase the bitrate
                4096: 5086

  - name: TED
    match:
        uri: '^http://feedproxy\.google\.com/~r/TEDTalks_video\b'

    options:
        set:
            ofps: 24

  - name: GameTrailers.com (Revert PMS Workaround)

    # convert:
    #
    #     http://www.gametrailers.com/download/48298/t_ufc09u_educate_int_gt.flv
    #
    # to:
    #
    #     http://www.gametrailers.com/player/48298.html

    # 1) extract the page ID
    match:
        uri: '^http://(www\.)?gametrailers\.com/download/(?<page_id>\d+)/[^.]+\.flv$'

    # 2) and use it to restore the URI of the HTML
    options:
        let:
            uri: 'http://www.gametrailers.com/player/$page_id.html'

  - name: GameTrailers.com
    match:
        uri: '^http://(www\.)?gametrailers\.com/'

    # The order is important here! Make sure we get the variables before we set the URI
    options:
        # extract some values from the HTML
        - get:
            movie_id: '\bmov_game_id\s*=\s*(\d+)'
            filename: 'http://www.gametrailers.com/download/\d+/(t_[^.]+)\.wmv'

        # now use them to rewrite the URI
        - let:
            uri: 'http://trailers-ak.gametrailers.com/gt_vault/$movie_id/$filename.flv'
